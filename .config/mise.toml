# ------------------------------------------
# SPDX-License-Identifier: MIT OR Apache-2.0
# -------------------------------- ùííùíëùíìùíêùíã --

[tools]
"cargo:sccache" = "latest"
"mold" = "latest"

[env]
"RUSTC_WRAPPER" = "sccache"

[tools."cargo:https://github.com/TheBevyFlock/bevy_cli.git"]
version = "latest"
crate = "bevy_cli"

[tools.rust]
# keep in sync with bevy_cli
version = "nightly-2025-06-26"
components = "rustc-codegen-cranelift-preview,rustc-dev,llvm-tools-preview"
targets = "x86_64-pc-windows-msvc,x86_64-unknown-linux-gnu"

## CHECKS #####################################################################

[tasks."check:deps"]
alias = "deny"
wait_for = ["check", "fix"]
tools = { "cargo:cargo-deny" = "latest" }
description = "Check dependencies with cargo-deny"
run = """
cargo deny --workspace \
    -L error \
    check advisories bans sources \
    --hide-inclusion-graph
"""

[tasks."check:headers"]
alias = "check-headers"
wait_for = ["check", "fix"]
depends = ["fix:headers --fail-on-fix"]

[tasks.bevy_lint]
hide = true
wait_for = ["check", "fix"]
run = """
    # bevy_lint
    export CARGO=$(rustup which --toolchain nightly-2025-06-26 cargo) bevy_lint

    if [ '{{flag(name="fix")}}' = 'true' ]; then
        FIX=" --fix";
    fi

    bevy lint --locked --all-features \
        $FIX \
        {{arg(name="package", var=true)}};
"""

[tasks.clippy]
hide = true
wait_for = ["check", "fix"]
run = """
    # clippy
    if [ '{{flag(name="fix")}}' = 'true' ]; then
        FIX=" --fix";
    fi

    cargo --color=always clippy --locked --all-features \
        $FIX \
        {{arg(name="package", var=true)}};
"""

[tasks."check:pkg:inspector"]
alias = "check-inspector"
depends = ["clippy -p q_inspector", "bevy_lint -p q_inspector"]
sources = ["src/bin/inspector/**"]

[tasks."check:pkg:app"]
alias = "check-app"
depends = ["clippy -p q_app", "bevy_lint -p q_app"]
sources = ["src/bin/app/**"]

[tasks."check:pkg:tests"]
alias = "check-tests"
depends = ["clippy -p q_test"]
sources = ["src/bin/lib/test/**"]

[tasks."check:pkg:utils"]
alias = "check-utils"
depends = ["clippy -p q_utils"]
sources = ["src/bin/lib/utils/**"]

[tasks.check]
description = "Lint the workspace."
confirm = "This may take a while. Prefer using the individual checks. Proceed anyways?"
depends_post = ["check:*", "check:pkg:*"]

## FIXES ######################################################################

[tasks."fix:headers"]
alias = "fix-headers"
wait_for = ["check", "fix"]
tools = { "uv" = "latest", "pipx:add_header_comment" = "latest" }
description = "Check file headers"
run = """
    # Checking headers

    if [ '{{flag(name="fail-on-fix")}}' = 'true' ]; then
        FAIL_ON_FIX=" --fail-on-fix";
    fi

    shopt -s globstar

    uv run add-header-comment --header-filepath header.txt \
        $FAIL_ON_FIX \
        ./.config/*.toml \
        ./src/**/Cargo.toml \
        ./*.toml;

    uv run add-header-comment --header-filepath header.txt\
        $FAIL_ON_FIX \
        --comment-style='//' \
        src/**/*.rs;
"""

[tasks."fix:rust"]
alias = "fix-rust"
description = "Fix any fixable issues in rust. Includes formatting."
depends = ["check:pkg:* --fix"]

[tasks.fix]
description = "Fix all fixable issues."
confirm = "This may take a while. Prefer using the individual checks. Proceed anyways?"
depends = ["fix:*"]

## BUILD AND DEPLOY ###########################################################

[tasks.ci]
tools = { "act" = "latest" }
description = "Test CI locally with nektos/act"
run = "act -P ubuntu-24.04=ghcr.io/catthehacker/ubuntu:act-24.04"

[tasks.test]
tools = { "cargo:cargo-nextest" = "latest" }
description = "Run tests for a specific package or all packages"
run = """
if [ "$1" = "all" ]; then
  cargo nextest run --workspace
else
  cargo nextest run -p "$1" "${@:2}"
fi
"""

[tasks.run]
description = "Run the specified workspace binary"
run = "cargo run -F dev --bin {{arg(name='binary')}} -- {{arg(name='rustc-opts', var=true)}}"

[tasks.build]
description = "Build the specified workspace binary"
run = "cargo build -F dev --bin {{arg(name='binary')}} {{arg(name='rustc-opts', var=true, default='--')}}"

[tasks.play]
description = "Play the game"
run = "cargo run -F dev --bin q_app"

[tasks.inspect]
description = "Run the inspector"
run = "cargo run -F dev --bin q_inspector"
